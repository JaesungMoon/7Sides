refactoring
1.final static フィルドを集めて太っているクラス改善
使用する範囲によってクラスを分離する

2.混同されるコンストラクタの初期化改善
ビルドバターンを通じて必須とオプションパラメータを区分する

3.独立された重複メソッドを効率的に改善
一つのクラスに抽出してstaticメソッドに変更

4.パラメータの乱用で巨大化されているメソッドを改善
パラメータの関連性を判断してメソッド抽出

5.ビズネスロジックと機能呼び出しが混ざっているメソッド改善
メソッド移動と抽出を利用してコードの可読性改善

6.分岐文に複雑になっているANDとOR演算子改善
独立条件もしくは結合条件メソッドを抽出して可読性改善

7.条件によって分離されるオブジェクト生成ロジック改善
ファクトリーパターン及びインタフェースを利用して改善

8.凝集度が低いメンバークラス改善
伊那クラスが外部で使われたら独立クラスで分離

9.間違った理解でできた相続関係を改善
相続を解除してコンポジット構造に変更

10.元の機能の異なるNULL例外処理の改善
渡されたNULL処理ロジックがあるか確認し、NULL処理オブジェクトを作る

11.連動規約に従属された構造改善
抽象化インスタンスを通じた柔軟性付与

12.類似した機能のインタフェースの多重相続構造の改善
インタフェース統合のための新しいインタフェースやインタフェース相続

13.シングルトーンの間違いを改善
データの同期化確認、ライフサイクル確認

UTテストの必要性

uiロジック
データロジック